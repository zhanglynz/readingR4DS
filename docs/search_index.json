[["index.html", "Reading Notes on R4DS Preface", " Reading Notes on R4DS Lingyun Zhang 2024-04-30 Preface Here are my notes on reading R for Data Science 2nd Ed. The books URL is: https://r4ds.hadley.nz/ This is only for my own study. "],["welcome.html", "1 Welcome", " 1 Welcome This book will teach you how to do data science with R: Youll learn how to get your data into R, get it into the most useful structure, transform it and visualize. "],["introduction.html", "2 Introduction", " 2 Introduction First, you must import your data into R. This typically means that you take data stored in a file, database, or web application programming interface (API) and load it into a data frame in R. [file; database; API] In brief, when your data is tidy, each column is a variable and each row is an observation. Once you have tidy data, a common next step is to transform it. [main engines are: dplyr and data.table packages] A good visualization will show you things you did not expect or raise new questions about the data. A good visualization might also hint that youre asking the wrong question or that you need to collect different data. Visualizations can surprise you, but they dont scale particularly well because they require a human to interpret them. [A picture is worth than thousand words.] Models are fundamentally mathematical or computational tools, so they generally scale well. But every model makes assumptions, and by its very nature, a model cannot question its own assumptions. That means a model cannot fundamentally surprise you. The last step of data science is communication, an absolutely critical part of any data analysis project. [communication] Theres a rough 80/20 rule at play: you can tackle about 80% of every project using the tools youll learn in this book, but youll need other tools to tackle the remaining 20%. [80/20 rule] The tools youll learn throughout the majority of this book will easily handle hundreds of megabytes of data, and with a bit of care, you can typically use them to work with a few gigabytes of data. [100 MB - a few GB] If youre routinely working with larger data (10100 GB, say), we recommend learning more about data.table. You need four things to run the code in this book: R, RStudio, a collection of R packages called the tidyverse, and a handful of other packages. Packages are the fundamental units of reproducible R code. They include reusable functions, documentation that describes how to use them, and sample data. [R; RStudio; tidyverse; other packages]  Upgrading [R] can be a bit of a hassle, especially for major versions that require you to re-install all your packages, but putting it off only makes it worse. [Q: how to update R and easily re-install all R packages?] RStudio is an integrated development environment, or IDE [IDE] An R package is a collection of functions, data, and documentation that extends the capabilities of base R. [R package] "],["data-visualization.html", "3 Data visualization", " 3 Data visualization ggplot2 implements the grammar of graphics, a coherent system for describing and building graphs. [grammar of graphics] aesthetic mappings and geometric objects  the fundamental building blocks of ggplot2 [aes; geo] ggthemes package, which offers a colorblind safe color palette. [ggthemes; colorblind safe] [A population is a (tidy) table, where each row is for an item/unit/element and each column is an attribute of the items/units/elements.] Once youve made a plot, you might want to get it out of R by saving it as an image that you can use elsewhere. Thats the job of ggsave() "],["workflow-basics.html", "4 Workflow: basics", " 4 Workflow: basics You will make lots of assignments, and &lt;- is a pain to type. You can save time with RStudios keyboard shortcut: Alt + - (the minus sign). [shortcut for &lt;-] R will ignore any text after # for that line. [comment] Use comments to explain the why of your code, not the how or the what. [explain why in comment] For data analysis code, use comments to explain your overall plan of attack and record important insights as you encounter them. [plan and insights in comment] Object names must start with a letter and can only contain letters, numbers, _, and .. [object name] You want your object names to be descriptive, so youll need to adopt a convention for multiple words. We recommend snake_case, where you separate lowercase words with _. [snake case] R is case sensitive. "],["data-transformation.html", "5 Data transformation", " 5 Data transformation If you want to use the base version of these functions after loading dplyr, youll need to use their full names: stats::filter() and stats::lag(). [full name of a function: pkgname::func_name] when we need to be precise about which package a function comes from, well use the same syntax as R: packagename::functionname(). The easiest way to pronounce the pipe is then. [pipe] dplyr verbs for rows: filter; arrange; distinct; count dplyr verbs for columns: mutate; select; rename; relocate You can rename variables as you select() them by using =. The new name appears on the left hand side of the =, and the old variable appears on the right hand side If you have a bunch of inconsistently named columns and it would be painful to fix them all by hand, check out janitor::clean_names() which provides some useful automated cleaning. [janitor::clean_names()] keyboard shortcut Ctrl/Cmd + Shift + M for %&gt;% or |&gt; The slice_ functions: df |&gt; slice_head(n = 1) takes the first row from each group. df |&gt; slice_tail(n = 1) takes the last row in each group. df |&gt; slice_min(x, n = 1) takes the row with the smallest value of column x. df |&gt; slice_max(x, n = 1) takes the row with the largest value of column x. df |&gt; slice_sample(n = 1) takes one random row. Whenever you do any aggregation, its always a good idea to include a count (n()). That way, you can ensure that youre not drawing conclusions based on very small amounts of data. [show the sample size] "],["workflow-code-style.html", "6 Workflow: code style", " 6 Workflow: code style Using a consistent style makes it easier for others (including future-you!) to read your work and is particularly important if you need to get help from someone else. [future you] As a general rule of thumb, its better to prefer long, descriptive names that are easy to understand rather than concise names that are fast to type. [descriptive names] if you have a bunch of variables that are a variation on a theme, youre better off giving them a common prefix rather than a common suffix [common prefix] Pipe sign should always have a space before it and should typically be the last thing on a line. [pipe] be wary of writing very long pipes, say longer than 10-15 lines. Try to break them up into smaller sub-tasks, giving each task an informative name. [break long pipes] create these headers (Cmd/Ctrl + Shift + R) [headers] "],["data-tidying.html", "7 Data tidying", " 7 Data tidying most built-in R functions work with vectors of values. That makes transforming tidy data feel particularly natural. [vectors] tidyr provides two functions for pivoting data: pivot_longer() and pivot_wider(). [pivot_longer; pivot_wider] A more challenging situation occurs when you have multiple pieces of information crammed into the column names, and you would like to store these in separate new variables. [multiple pieces of information in a column name] The examples we presented here are a selection of those from vignette(pivot, package = tidyr), so if you encounter a problem that this chapter doesnt help you with, that vignette is a good place to try next. [vignette(pivot, package = tidyr)] Example: library(tidyverse) tbl &lt;- tribble( ~id, ~x_1, ~y_2, &quot;a&quot;, 1, 2, &quot;b&quot;, 3, 4, &#39;c&#39;, 5, 6) new_tbl &lt;- tbl %&gt;% pivot_longer( cols = x_1:y_2, names_to = c(&quot;name&quot;, &quot;number&quot;), names_sep = &quot;_&quot;, values_to = &quot;value&quot; ) new_tbl ## # A tibble: 6 x 4 ## id name number value ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 a x 1 1 ## 2 a y 2 2 ## 3 b x 1 3 ## 4 b y 2 4 ## 5 c x 1 5 ## 6 c y 2 6 "],["workflow-scripts-and-projects.html", "8 Workflow: scripts and projects", " 8 Workflow: scripts and projects "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
